-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)
import System.FilePath 
import System.Process

import LexLatte
import ParLatte
-- import SkelLatte
import PrintLatte
import AbsLatte
import CompilerBackend
-- import CompilerFrontend



import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

printError :: String -> IO ()
printError errMessage = do
    putStrLn "ERROR"
    putStrLn errMessage
    exitFailure

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = do
  let path = takeDirectory f ++ "/"
  let name = takeBaseName f
  putStrLn "" >> readFile f >>= run v p path name
  -- for macOS path to LLVM
  let llvm_as = "/usr/local/opt/llvm/bin/llvm-as -o "
  let llvm_link = "/usr/local/opt/llvm/bin/llvm-link -o "
  -- Linux path to LLVM
  -- let llvm_as = "llvm-as -o "
  -- let llvm_link = "llvm-link -o "
  let first = llvm_as ++ path ++ name ++ "-out.bc " ++ path ++ name ++ ".ll" ++ " && "
  let second = llvm_link ++ path ++ name ++ ".bc " ++ path ++ name ++ "-out.bc /Users/azazel/Documents/Projects/MIMUW/LatteCompiler/Latte/res/runtime.bc /Users/azazel/Documents/Projects/MIMUW/LatteCompiler/Latte/res/concat.bc" ++ " && "
  let third = "rm " ++ path ++ name ++ "-out.bc"
  runCommand (first ++ second ++ third)
  putStrLn (".ll and  .bc output files created in directory" ++ path ++ "\n")

run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> String -> String -> IO ()
run v p path name s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do putStrLn "\nParse Successful!"
                          let Ok pr = pProgram ts
                          let availableFunctions = "declare i8* @concat(i8*, i8*)\n" ++ "declare i32 @strlen(i8*)\n" ++ "declare i8* @strcat(i8*, i8*)\n" ++ "declare i8* @strcpy(i8*, i8*)\n" ++ "declare i8* @malloc(i32)\n" ++ "declare void @printInt(i32)\n" ++ "declare void @printString(i8*)\n" ++ "declare void @error()\n" ++ "declare i32 @readInt()\n" ++ "declare i8* @readString()\n\n"
                          let result = availableFunctions ++ compileProgram pr
                          putStrLn result
                          writeFile (path ++ name ++ ".ll") result


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= runFile 2 pProgram
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    fs -> mapM_ (runFile 2 pProgram) fs
